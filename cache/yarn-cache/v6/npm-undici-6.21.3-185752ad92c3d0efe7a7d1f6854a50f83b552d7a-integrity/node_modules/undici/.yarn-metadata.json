{
  "manifest": {
    "name": "undici",
    "version": "6.21.3",
    "description": "An HTTP/1.1 client, written from scratch for Node.js",
    "homepage": "https://undici.nodejs.org/",
    "bugs": {
      "url": "https://github.com/nodejs/undici/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/nodejs/undici.git"
    },
    "license": "MIT",
    "contributors": [
      {
        "name": "Daniele Belardi",
        "url": "https://github.com/dnlup"
      },
      {
        "name": "Ethan Arrowood",
        "url": "https://github.com/ethan-arrowood"
      },
      {
        "name": "Matteo Collina",
        "url": "https://github.com/mcollina"
      },
      {
        "name": "Matthew Aitken",
        "url": "https://github.com/KhafraDev"
      },
      {
        "name": "Robert Nagy",
        "url": "https://github.com/ronag"
      },
      {
        "name": "Szymon Marczak",
        "url": "https://github.com/szmarczak"
      },
      {
        "name": "Tomas Della Vedova",
        "url": "https://github.com/delvedor"
      }
    ],
    "keywords": [
      "fetch",
      "http",
      "https",
      "promise",
      "request",
      "curl",
      "wget",
      "xhr",
      "whatwg"
    ],
    "main": "index.js",
    "types": "index.d.ts",
    "scripts": {
      "build:node": "npx esbuild@0.19.10 index-fetch.js --bundle --platform=node --outfile=undici-fetch.js --define:esbuildDetection=1 --keep-names && node scripts/strip-comments.js",
      "prebuild:wasm": "node build/wasm.js --prebuild",
      "build:wasm": "node build/wasm.js --docker",
      "lint": "standard | snazzy",
      "lint:fix": "standard --fix | snazzy",
      "test": "npm run test:javascript && cross-env NODE_V8_COVERAGE=  npm run test:typescript",
      "test:javascript": "node scripts/generate-pem && npm run test:unit && npm run test:node-fetch && npm run test:cache && npm run test:interceptors && npm run test:fetch && npm run test:cookies && npm run test:eventsource && npm run test:wpt && npm run test:websocket && npm run test:node-test && npm run test:jest",
      "test:javascript:withoutintl": "node scripts/generate-pem && npm run test:unit && npm run test:node-fetch && npm run test:fetch:nobuild && npm run test:cache && npm run test:interceptors && npm run test:cookies && npm run test:eventsource:nobuild && npm run test:wpt:withoutintl && npm run test:node-test",
      "test:busboy": "borp -p \"test/busboy/*.js\"",
      "test:cache": "borp -p \"test/cache/*.js\"",
      "test:cookies": "borp -p \"test/cookie/*.js\"",
      "test:eventsource": "npm run build:node && npm run test:eventsource:nobuild",
      "test:eventsource:nobuild": "borp --expose-gc -p \"test/eventsource/*.js\"",
      "test:fuzzing": "node test/fuzzing/fuzzing.test.js",
      "test:fetch": "npm run build:node && npm run test:fetch:nobuild",
      "test:fetch:nobuild": "borp --timeout 180000 --expose-gc --concurrency 1 -p \"test/fetch/*.js\" && npm run test:webidl && npm run test:busboy",
      "test:h2": "npm run test:h2:core && npm run test:h2:fetch",
      "test:h2:core": "borp -p \"test/http2*.js\"",
      "test:h2:fetch": "npm run build:node && borp -p \"test/fetch/http2*.js\"",
      "test:interceptors": "borp -p \"test/interceptors/*.js\"",
      "test:jest": "cross-env NODE_V8_COVERAGE= jest",
      "test:unit": "borp --expose-gc -p \"test/*.js\"",
      "test:node-fetch": "borp -p \"test/node-fetch/**/*.js\"",
      "test:node-test": "borp -p \"test/node-test/**/*.js\"",
      "test:tdd": "borp --expose-gc -p \"test/*.js\"",
      "test:tdd:node-test": "borp -p \"test/node-test/**/*.js\" -w",
      "test:typescript": "tsd && tsc test/imports/undici-import.ts --typeRoots ./types && tsc ./types/*.d.ts --noEmit --typeRoots ./types",
      "test:webidl": "borp -p \"test/webidl/*.js\"",
      "test:websocket": "borp -p \"test/websocket/*.js\"",
      "test:websocket:autobahn": "node test/autobahn/client.js",
      "test:websocket:autobahn:report": "node test/autobahn/report.js",
      "test:wpt": "node test/wpt/start-fetch.mjs && node test/wpt/start-FileAPI.mjs && node test/wpt/start-mimesniff.mjs && node test/wpt/start-xhr.mjs && node test/wpt/start-websockets.mjs && node test/wpt/start-cacheStorage.mjs && node test/wpt/start-eventsource.mjs",
      "test:wpt:withoutintl": "node test/wpt/start-fetch.mjs && node test/wpt/start-mimesniff.mjs && node test/wpt/start-xhr.mjs && node test/wpt/start-cacheStorage.mjs && node test/wpt/start-eventsource.mjs",
      "coverage": "npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report",
      "coverage:ci": "npm run coverage:clean && cross-env NODE_V8_COVERAGE=./coverage/tmp npm run test:javascript && npm run coverage:report:ci",
      "coverage:clean": "node ./scripts/clean-coverage.js",
      "coverage:report": "cross-env NODE_V8_COVERAGE= c8 report",
      "coverage:report:ci": "c8 report",
      "bench": "echo \"Error: Benchmarks have been moved to '/benchmarks'\" && exit 1",
      "serve:website": "echo \"Error: Documentation has been moved to '/docs'\" && exit 1",
      "prepare": "husky && node ./scripts/platform-shell.js"
    },
    "devDependencies": {
      "@fastify/busboy": "2.1.1",
      "@matteo.collina/tspl": "^0.1.1",
      "@sinonjs/fake-timers": "^11.1.0",
      "@types/node": "~18.19.50",
      "abort-controller": "^3.0.0",
      "borp": "^0.15.0",
      "c8": "^10.0.0",
      "cross-env": "^7.0.3",
      "dns-packet": "^5.4.0",
      "fast-check": "^3.17.1",
      "form-data": "^4.0.0",
      "formdata-node": "^6.0.3",
      "https-pem": "^3.0.0",
      "husky": "^9.0.7",
      "jest": "^29.0.2",
      "jsdom": "^24.0.0",
      "node-forge": "^1.3.1",
      "pre-commit": "^1.2.2",
      "proxy": "^2.1.1",
      "snazzy": "^9.0.0",
      "standard": "^17.0.0",
      "tsd": "^0.31.0",
      "typescript": "^5.0.2",
      "ws": "^8.11.0"
    },
    "engines": {
      "node": ">=18.17"
    },
    "standard": {
      "env": [
        "jest"
      ],
      "ignore": [
        "lib/llhttp/constants.js",
        "lib/llhttp/utils.js",
        "test/fixtures/wpt"
      ]
    },
    "tsd": {
      "directory": "test/types",
      "compilerOptions": {
        "esModuleInterop": true,
        "lib": [
          "esnext"
        ]
      }
    },
    "jest": {
      "testMatch": [
        "<rootDir>/test/jest/**"
      ]
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\onesh\\Desktop\\NX_DEV Template\\cache\\yarn-cache\\v6\\npm-undici-6.21.3-185752ad92c3d0efe7a7d1f6854a50f83b552d7a-integrity\\node_modules\\undici\\package.json",
    "readmeFilename": "README.md",
    "readme": "# undici\n\n[![Node CI](https://github.com/nodejs/undici/actions/workflows/nodejs.yml/badge.svg)](https://github.com/nodejs/undici/actions/workflows/nodejs.yml) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/) [![npm version](https://badge.fury.io/js/undici.svg)](https://badge.fury.io/js/undici) [![codecov](https://codecov.io/gh/nodejs/undici/branch/main/graph/badge.svg?token=yZL6LtXkOA)](https://codecov.io/gh/nodejs/undici)\n\nAn HTTP/1.1 client, written from scratch for Node.js.\n\n> Undici means eleven in Italian. 1.1 -> 11 -> Eleven -> Undici.\nIt is also a Stranger Things reference.\n\n## How to get involved\n\nHave a question about using Undici? Open a [Q&A Discussion](https://github.com/nodejs/undici/discussions/new) or join our official OpenJS [Slack](https://openjs-foundation.slack.com/archives/C01QF9Q31QD) channel.\n\nLooking to contribute? Start by reading the [contributing guide](./CONTRIBUTING.md)\n\n## Install\n\n```\nnpm i undici\n```\n\n## Benchmarks\n\nThe benchmark is a simple getting data [example](https://github.com/nodejs/undici/blob/main/benchmarks/benchmark.js) using a\n50 TCP connections with a pipelining depth of 10 running on Node 20.10.0.\n\n|       _Tests_       | _Samples_ |     _Result_     | _Tolerance_ | _Difference with slowest_ |\n| :-----------------: | :-------: | :--------------: | :---------: | :-----------------------: |\n|   undici - fetch    |    30     | 3704.43 req/sec  |  ± 2.95 %   |             -             |\n| http - no keepalive |    20     | 4275.30 req/sec  |  ± 2.60 %   |         + 15.41 %         |\n|     node-fetch      |    10     | 4759.42 req/sec  |  ± 0.87 %   |         + 28.48 %         |\n|       request       |    40     | 4803.37 req/sec  |  ± 2.77 %   |         + 29.67 %         |\n|        axios        |    45     | 4951.97 req/sec  |  ± 2.88 %   |         + 33.68 %         |\n|         got         |    10     | 5969.67 req/sec  |  ± 2.64 %   |         + 61.15 %         |\n|     superagent      |    10     | 9471.48 req/sec  |  ± 1.50 %   |        + 155.68 %         |\n|  http - keepalive   |    25     | 10327.49 req/sec |  ± 2.95 %   |        + 178.79 %         |\n|  undici - pipeline  |    10     | 15053.41 req/sec |  ± 1.63 %   |        + 306.36 %         |\n|  undici - request   |    10     | 19264.24 req/sec |  ± 1.74 %   |        + 420.03 %         |\n|   undici - stream   |    15     | 20317.29 req/sec |  ± 2.13 %   |        + 448.46 %         |\n|  undici - dispatch  |    10     | 24883.28 req/sec |  ± 1.54 %   |        + 571.72 %         |\n\nThe benchmark is a simple sending data [example](https://github.com/nodejs/undici/blob/main/benchmarks/post-benchmark.js) using a\n50 TCP connections with a pipelining depth of 10 running on Node 20.10.0.\n\n|       _Tests_       | _Samples_ |    _Result_     | _Tolerance_ | _Difference with slowest_ |\n| :-----------------: | :-------: | :-------------: | :---------: | :-----------------------: |\n|   undici - fetch    |    20     | 1968.42 req/sec |  ± 2.63 %   |             -             |\n| http - no keepalive |    25     | 2330.30 req/sec |  ± 2.99 %   |         + 18.38 %         |\n|     node-fetch      |    20     | 2485.36 req/sec |  ± 2.70 %   |         + 26.26 %         |\n|         got         |    15     | 2787.68 req/sec |  ± 2.56 %   |         + 41.62 %         |\n|       request       |    30     | 2805.10 req/sec |  ± 2.59 %   |         + 42.50 %         |\n|        axios        |    10     | 3040.45 req/sec |  ± 1.72 %   |         + 54.46 %         |\n|     superagent      |    20     | 3358.29 req/sec |  ± 2.51 %   |         + 70.61 %         |\n|  http - keepalive   |    20     | 3477.94 req/sec |  ± 2.51 %   |         + 76.69 %         |\n|  undici - pipeline  |    25     | 3812.61 req/sec |  ± 2.80 %   |         + 93.69 %         |\n|  undici - request   |    10     | 6067.00 req/sec |  ± 0.94 %   |        + 208.22 %         |\n|   undici - stream   |    10     | 6391.61 req/sec |  ± 1.98 %   |        + 224.71 %         |\n|  undici - dispatch  |    10     | 6397.00 req/sec |  ± 1.48 %   |        + 224.98 %         |\n\n\n## Quick Start\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\n\nfor await (const data of body) { console.log('data', data) }\n\nconsole.log('trailers', trailers)\n```\n\n## Body Mixins\n\nThe `body` mixins are the most common way to format the request/response body. Mixins include:\n\n- [`.arrayBuffer()`](https://fetch.spec.whatwg.org/#dom-body-arraybuffer)\n- [`.blob()`](https://fetch.spec.whatwg.org/#dom-body-blob)\n- [`.bytes()`](https://fetch.spec.whatwg.org/#dom-body-bytes)\n- [`.json()`](https://fetch.spec.whatwg.org/#dom-body-json)\n- [`.text()`](https://fetch.spec.whatwg.org/#dom-body-text)\n\n> [!NOTE]\n> The body returned from `undici.request` does not implement `.formData()`.\n\nExample usage:\n\n```js\nimport { request } from 'undici'\n\nconst {\n  statusCode,\n  headers,\n  trailers,\n  body\n} = await request('http://localhost:3000/foo')\n\nconsole.log('response received', statusCode)\nconsole.log('headers', headers)\nconsole.log('data', await body.json())\nconsole.log('trailers', trailers)\n```\n\n_Note: Once a mixin has been called then the body cannot be reused, thus calling additional mixins on `.body`, e.g. `.body.json(); .body.text()` will result in an error `TypeError: unusable` being thrown and returned through the `Promise` rejection._\n\nShould you need to access the `body` in plain-text after using a mixin, the best practice is to use the `.text()` mixin first and then manually parse the text to the desired format.\n\nFor more information about their behavior, please reference the body mixin from the [Fetch Standard](https://fetch.spec.whatwg.org/#body-mixin).\n\n## Common API Methods\n\nThis section documents our most commonly used API methods. Additional APIs are documented in their own files within the [docs](./docs/) folder and are accessible via the navigation list on the left side of the docs site.\n\n### `undici.request([url, options]): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`RequestOptions`](./docs/docs/api/Dispatcher.md#parameter-requestoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n\nReturns a promise with the result of the `Dispatcher.request` method.\n\nCalls `options.dispatcher.request(options)`.\n\nSee [Dispatcher.request](./docs/docs/api/Dispatcher.md#dispatcherrequestoptions-callback) for more details, and [request examples](./examples/README.md) for examples.\n\n### `undici.stream([url, options, ]factory): Promise`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`StreamOptions`](./docs/docs/api/Dispatcher.md#parameter-streamoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n* **factory** `Dispatcher.stream.factory`\n\nReturns a promise with the result of the `Dispatcher.stream` method.\n\nCalls `options.dispatcher.stream(options, factory)`.\n\nSee [Dispatcher.stream](./docs/docs/api/Dispatcher.md#dispatcherstreamoptions-factory-callback) for more details.\n\n### `undici.pipeline([url, options, ]handler): Duplex`\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`PipelineOptions`](./docs/docs/api/Dispatcher.md#parameter-pipelineoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **method** `String` - Default: `PUT` if `options.body`, otherwise `GET`\n  * **maxRedirections** `Integer` - Default: `0`\n* **handler** `Dispatcher.pipeline.handler`\n\nReturns: `stream.Duplex`\n\nCalls `options.dispatch.pipeline(options, handler)`.\n\nSee [Dispatcher.pipeline](./docs/docs/api/Dispatcher.md#dispatcherpipelineoptions-handler) for more details.\n\n### `undici.connect([url, options]): Promise`\n\nStarts two-way communications with the requested resource using [HTTP CONNECT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT).\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`ConnectOptions`](./docs/docs/api/Dispatcher.md#parameter-connectoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **maxRedirections** `Integer` - Default: `0`\n* **callback** `(err: Error | null, data: ConnectData | null) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.connect` method.\n\nCalls `options.dispatch.connect(options)`.\n\nSee [Dispatcher.connect](./docs/docs/api/Dispatcher.md#dispatcherconnectoptions-callback) for more details.\n\n### `undici.fetch(input[, init]): Promise`\n\nImplements [fetch](https://fetch.spec.whatwg.org/#fetch-method).\n\n* https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n* https://fetch.spec.whatwg.org/#fetch-method\n\nBasic usage example:\n\n```js\nimport { fetch } from 'undici'\n\n\nconst res = await fetch('https://example.com')\nconst json = await res.json()\nconsole.log(json)\n```\n\nYou can pass an optional dispatcher to `fetch` as:\n\n```js\nimport { fetch, Agent } from 'undici'\n\nconst res = await fetch('https://example.com', {\n  // Mocks are also supported\n  dispatcher: new Agent({\n    keepAliveTimeout: 10,\n    keepAliveMaxTimeout: 10\n  })\n})\nconst json = await res.json()\nconsole.log(json)\n```\n\n#### `request.body`\n\nA body can be of the following types:\n\n- ArrayBuffer\n- ArrayBufferView\n- AsyncIterables\n- Blob\n- Iterables\n- String\n- URLSearchParams\n- FormData\n\nIn this implementation of fetch, ```request.body``` now accepts ```Async Iterables```. It is not present in the [Fetch Standard.](https://fetch.spec.whatwg.org)\n\n```js\nimport { fetch } from 'undici'\n\nconst data = {\n  async *[Symbol.asyncIterator]() {\n    yield 'hello'\n    yield 'world'\n  },\n}\n\nawait fetch('https://example.com', { body: data, method: 'POST', duplex: 'half' })\n```\n\n[FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) besides text data and buffers can also utilize streams via [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects:\n\n```js\nimport { openAsBlob } from 'node:fs'\n\nconst file = await openAsBlob('./big.csv')\nconst body = new FormData()\nbody.set('file', file, 'big.csv')\n\nawait fetch('http://example.com', { method: 'POST', body })\n```\n\n#### `request.duplex`\n\n- half\n\nIn this implementation of fetch, `request.duplex` must be set if `request.body` is `ReadableStream` or `Async Iterables`, however, fetch requests are currently always full duplex. For more detail refer to the [Fetch Standard.](https://fetch.spec.whatwg.org/#dom-requestinit-duplex).\n\n#### `response.body`\n\nNodejs has two kinds of streams: [web streams](https://nodejs.org/dist/latest-v16.x/docs/api/webstreams.html), which follow the API of the WHATWG web standard found in browsers, and an older Node-specific [streams API](https://nodejs.org/api/stream.html). `response.body` returns a readable web stream. If you would prefer to work with a Node stream you can convert a web stream using `.fromWeb()`.\n\n```js\nimport { fetch } from 'undici'\nimport { Readable } from 'node:stream'\n\nconst response = await fetch('https://example.com')\nconst readableWebStream = response.body\nconst readableNodeStream = Readable.fromWeb(readableWebStream)\n```\n\n#### Specification Compliance\n\nThis section documents parts of the [Fetch Standard](https://fetch.spec.whatwg.org) that Undici does\nnot support or does not fully implement.\n\n##### Garbage Collection\n\n* https://fetch.spec.whatwg.org/#garbage-collection\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) allows users to skip consuming the response body by relying on\n[garbage collection](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection) to release connection resources. Undici does not do the same. Therefore, it is important to always either consume or cancel the response body.\n\nGarbage collection in Node is less aggressive and deterministic\n(due to the lack of clear idle periods that browsers have through the rendering refresh rate)\nwhich means that leaving the release of connection resources to the garbage collector can lead\nto excessive connection usage, reduced performance (due to less connection re-use), and even\nstalls or deadlocks when running out of connections.\n\n```js\n// Do\nconst headers = await fetch(url)\n  .then(async res => {\n    for await (const chunk of res.body) {\n      // force consumption of body\n    }\n    return res.headers\n  })\n\n// Do not\nconst headers = await fetch(url)\n  .then(res => res.headers)\n```\n\nHowever, if you want to get only headers, it might be better to use `HEAD` request method. Usage of this method will obviate the need for consumption or cancelling of the response body. See [MDN - HTTP - HTTP request methods - HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) for more details.\n\n```js\nconst headers = await fetch(url, { method: 'HEAD' })\n  .then(res => res.headers)\n```\n\n##### Forbidden and Safelisted Header Names\n\n* https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name\n* https://fetch.spec.whatwg.org/#forbidden-header-name\n* https://fetch.spec.whatwg.org/#forbidden-response-header-name\n* https://github.com/wintercg/fetch/issues/6\n\nThe [Fetch Standard](https://fetch.spec.whatwg.org) requires implementations to exclude certain headers from requests and responses. In browser environments, some headers are forbidden so the user agent remains in full control over them. In Undici, these constraints are removed to give more control to the user.\n\n### `undici.upgrade([url, options]): Promise`\n\nUpgrade to a different protocol. See [MDN - HTTP - Protocol upgrade mechanism](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism) for more details.\n\nArguments:\n\n* **url** `string | URL | UrlObject`\n* **options** [`UpgradeOptions`](./docs/docs/api/Dispatcher.md#parameter-upgradeoptions)\n  * **dispatcher** `Dispatcher` - Default: [getGlobalDispatcher](#undicigetglobaldispatcher)\n  * **maxRedirections** `Integer` - Default: `0`\n* **callback** `(error: Error | null, data: UpgradeData) => void` (optional)\n\nReturns a promise with the result of the `Dispatcher.upgrade` method.\n\nCalls `options.dispatcher.upgrade(options)`.\n\nSee [Dispatcher.upgrade](./docs/docs/api/Dispatcher.md#dispatcherupgradeoptions-callback) for more details.\n\n### `undici.setGlobalDispatcher(dispatcher)`\n\n* dispatcher `Dispatcher`\n\nSets the global dispatcher used by Common API Methods.\n\n### `undici.getGlobalDispatcher()`\n\nGets the global dispatcher used by Common API Methods.\n\nReturns: `Dispatcher`\n\n### `undici.setGlobalOrigin(origin)`\n\n* origin `string | URL | undefined`\n\nSets the global origin used in `fetch`.\n\nIf `undefined` is passed, the global origin will be reset. This will cause `Response.redirect`, `new Request()`, and `fetch` to throw an error when a relative path is passed.\n\n```js\nsetGlobalOrigin('http://localhost:3000')\n\nconst response = await fetch('/api/ping')\n\nconsole.log(response.url) // http://localhost:3000/api/ping\n```\n\n### `undici.getGlobalOrigin()`\n\nGets the global origin used in `fetch`.\n\nReturns: `URL`\n\n### `UrlObject`\n\n* **port** `string | number` (optional)\n* **path** `string` (optional)\n* **pathname** `string` (optional)\n* **hostname** `string` (optional)\n* **origin** `string` (optional)\n* **protocol** `string` (optional)\n* **search** `string` (optional)\n\n## Specification Compliance\n\nThis section documents parts of the HTTP/1.1 specification that Undici does\nnot support or does not fully implement.\n\n### Expect\n\nUndici does not support the `Expect` request header field. The request\nbody is  always immediately sent and the `100 Continue` response will be\nignored.\n\nRefs: https://tools.ietf.org/html/rfc7231#section-5.1.1\n\n### Pipelining\n\nUndici will only use pipelining if configured with a `pipelining` factor\ngreater than `1`.\n\nUndici always assumes that connections are persistent and will immediately\npipeline requests, without checking whether the connection is persistent.\nHence, automatic fallback to HTTP/1.0 or HTTP/1.1 without pipelining is\nnot supported.\n\nUndici will immediately pipeline when retrying requests after a failed\nconnection. However, Undici will not retry the first remaining requests in\nthe prior pipeline and instead error the corresponding callback/promise/stream.\n\nUndici will abort all running requests in the pipeline when any of them are\naborted.\n\n* Refs: https://tools.ietf.org/html/rfc2616#section-8.1.2.2\n* Refs: https://tools.ietf.org/html/rfc7230#section-6.3.2\n\n### Manual Redirect\n\nSince it is not possible to manually follow an HTTP redirect on the server-side,\nUndici returns the actual response instead of an `opaqueredirect` filtered one\nwhen invoked with a `manual` redirect. This aligns `fetch()` with the other\nimplementations in Deno and Cloudflare Workers.\n\nRefs: https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n\n## Workarounds\n\n### Network address family autoselection.\n\nIf you experience problem when connecting to a remote server that is resolved by your DNS servers to a IPv6 (AAAA record)\nfirst, there are chances that your local router or ISP might have problem connecting to IPv6 networks. In that case\nundici will throw an error with code `UND_ERR_CONNECT_TIMEOUT`.\n\nIf the target server resolves to both a IPv6 and IPv4 (A records) address and you are using a compatible Node version\n(18.3.0 and above), you can fix the problem by providing the `autoSelectFamily` option (support by both `undici.request`\nand `undici.Agent`) which will enable the family autoselection algorithm when establishing the connection.\n\n## Collaborators\n\n* [__Daniele Belardi__](https://github.com/dnlup), <https://www.npmjs.com/~dnlup>\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Szymon Marczak__](https://github.com/szmarczak), <https://www.npmjs.com/~szmarczak>\n* [__Tomas Della Vedova__](https://github.com/delvedor), <https://www.npmjs.com/~delvedor>\n\n### Releasers\n\n* [__Ethan Arrowood__](https://github.com/ethan-arrowood), <https://www.npmjs.com/~ethan_arrowood>\n* [__Matteo Collina__](https://github.com/mcollina), <https://www.npmjs.com/~matteo.collina>\n* [__Robert Nagy__](https://github.com/ronag), <https://www.npmjs.com/~ronag>\n* [__Matthew Aitken__](https://github.com/KhafraDev), <https://www.npmjs.com/~khaf>\n\n## License\n\nMIT\n",
    "licenseText": "MIT License\n\nCopyright (c) Matteo Collina and Undici contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/undici/-/undici-6.21.3.tgz#185752ad92c3d0efe7a7d1f6854a50f83b552d7a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/undici/-/undici-6.21.3.tgz",
    "hash": "185752ad92c3d0efe7a7d1f6854a50f83b552d7a",
    "integrity": "sha512-gBLkYIlEnSp8pFbT64yFgGE6UIB9tAkhukC23PmMDCe5Nd+cRqKxSjw5y54MK2AZMgZfJWMaNE4nYUHgi1XEOw==",
    "registry": "npm",
    "packageName": "undici",
    "cacheIntegrity": "sha512-gBLkYIlEnSp8pFbT64yFgGE6UIB9tAkhukC23PmMDCe5Nd+cRqKxSjw5y54MK2AZMgZfJWMaNE4nYUHgi1XEOw== sha1-GFdSrZLD0O/np9H2hUpQ+DtVLXo="
  },
  "registry": "npm",
  "hash": "185752ad92c3d0efe7a7d1f6854a50f83b552d7a"
}