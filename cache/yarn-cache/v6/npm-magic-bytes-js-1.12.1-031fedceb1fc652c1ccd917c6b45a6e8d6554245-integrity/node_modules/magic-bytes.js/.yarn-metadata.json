{
  "manifest": {
    "name": "magic-bytes.js",
    "version": "1.12.1",
    "main": "./dist/index.js",
    "module": "./dist/index.js",
    "types": "./dist/index.d.ts",
    "files": [
      "dist/"
    ],
    "release": {
      "branches": [
        "master"
      ],
      "plugins": [
        "@semantic-release/commit-analyzer",
        "@semantic-release/release-notes-generator",
        "@semantic-release/npm",
        "@semantic-release/github",
        "@semantic-release/git"
      ]
    },
    "scripts": {
      "prettier": "prettier --write \"{src,__{tests,mocks}__}/**/*.{tsx,ts}\"",
      "pre-test": "jest --clear-cache",
      "prebuild": "rimraf dist",
      "test": "jest",
      "build": "tsc",
      "example:html": "webpack --config example/html/webpack.config.js; open example/html/index.html",
      "example:webapp": "vite --config example/webapp/vite.config.js example/webapp",
      "build:example:webapp": "vite --config example/webapp/vite.config.js build example/webapp",
      "semantic-release": "semantic-release",
      "prepare": "npm run build"
    },
    "repository": {
      "url": "https://github.com/LarsKoelpin/magic-bytes",
      "type": "git"
    },
    "author": {
      "name": "Lars Kölpin"
    },
    "license": "MIT",
    "description": "Detect Filetype by bytes",
    "keywords": [
      "magic-bytes",
      "mime",
      "filetype",
      "file",
      "extension",
      "magic byte",
      "magic number",
      "mime",
      "mimetype",
      "validation",
      "javascript",
      "upload"
    ],
    "devDependencies": {
      "@babel/preset-typescript": "^7.15.0",
      "@commitlint/cli": "^17.7.1",
      "@commitlint/config-conventional": "^17.7.0",
      "@semantic-release/git": "^10.0.1",
      "@types/jest": "^27.5.2",
      "@types/node": "^16.6.2",
      "husky": "^8.0.3",
      "jest": "^27.0.6",
      "open": "^9.1.0",
      "prettier": "^2.6.1",
      "prettier-plugin-organize-imports": "^2.3.4",
      "regenerator-runtime": "^0.11.1",
      "semantic-release": "^22.0.5",
      "ts-jest": "^27.0.5",
      "ts-loader": "^9.4.4",
      "ts-node": "^10.2.1",
      "typescript": "^4.3.5",
      "vite": "^4.4.9",
      "webpack-cli": "^5.1.4",
      "rimraf": "^6.0.1"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\onesh\\Desktop\\NX_DEV Template\\cache\\yarn-cache\\v6\\npm-magic-bytes-js-1.12.1-031fedceb1fc652c1ccd917c6b45a6e8d6554245-integrity\\node_modules\\magic-bytes.js\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Magic bytes\n\n[![Build and test](https://github.com/LarsKoelpin/magic-bytes/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/LarsKoelpin/magic-bytes/actions/workflows/build-and-test.yml)\n\nMagic Bytes is a javascript library analyzing the first bytes of a file to tell you its type. \nUse it inside your browser or serversided using nodejs.\n\nThe procedure is based on https://en.wikipedia.org/wiki/List_of_file_signatures.\n\n\n> [!NOTE]  \n> A small note on versioning.\n> Strictly speaking, each new filetype which is supported by this library can break someones' API.\n> Please note that this library adds new filetypes with minor release.\n> This means files, which validate to \"null\" in some versions, may find a result in a new version.\n> \n> Or in some cases the library will find more results, than before. So don't depend on the found-array size in\n> any shape or form.\n> Filetypes will not be removed though.\n\n# Installation\nRun `npm install magic-bytes.js`\n\n\n# Interactive example\nThere is an interactive example present at https://larskoelpin.github.io/magic-bytes/.\n\n# Usage\n\nThe following functions are available:\n* `filetypeinfo(bytes: number[])` Contains typeinformation like name, extension and mime type: `[{typename: \"zip\"}, {typename: \"jar\"}]`\n* `filetypename(bytes: number[])` : Contains type names only: `[\"zip\", \"jar\"]`\n* `filetypemime(bytes: number[])` : Contains type mime types only: `[\"application/zip\", \"application/jar\"]`\n* `filetypeextension(bytes: number[])` : Contains type extensions only: `[\"zip\", \"jar\"]`\n* `register(fileType: string, string[])`: registers a custom signature\n\nBoth function return an empty array `[]` otherwise, which means it could not detect the file signature. Keep in mind that\ntxt files for example fall in this category.\n\nYou don't have to load the whole file in memory. For validating a file uploaded to S3 using Lambda for example, it may be  \nenough to load the files first 100 bytes and validate against them.  This is especially useful for big files.\n\nsee examples for practical usage.\n\nOn server:\n```javascript\nimport filetype from 'magic-bytes.js'\n\nfiletype(fs.readFileSync(\"myimage.png\")) // [\"png\"]\n```\n\n\nTo run an HTML-Example checkout the project and run\n\n```\nnpm install; npm run example\n```\n\nThis opens an HTML example using magic bytes as a window variable. It kinda looks like that.\n\n```html\n<input type=\"file\" id=\"file\" />\n\n <script src=\"node_modules/magic-bytes.js/dist/browser.js\" type=\"application/javascript\"></script>\n<script>\n    document.getElementById(\"file\").addEventListener('change', (event, x) => {\n      const fileReader = new FileReader();\n      fileReader.onloadend = (f) => {\n        const bytes = new Uint8Array(f.target.result);\n        console.log(\"Possible filetypes: \" + filetypeinfo(bytes))\n      }\n      fileReader.readAsArrayBuffer(event.target.files[0])\n    })\n</script>\n```\n\n\n# Tests\nRun  `npm test`\n\n# Example\nSee examples/\n\n# How does it work\nThe `create-snapshot.js` creates a new tree. The tree has a similar shape to the following \n```json\n{\n  \"0x47\": {\n    \"0x49\": {\n      \"0x46\": {\n        \"0x38\": {\n          \"0x37\": {\n            \"0x61\": {\n              \"matches\": [\n                {\n                  \"typename\": \"gif\",\n                  \"mime\": \"image/gif\",\n                  \"extension\": \"gif\"\n                }\n              ]\n            }\n          },\n        }\n      }\n    }\n  }\n}\n```\n\nIt acts as a giant lookup map for the given byte signatures.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2022 Lars Kölpin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/magic-bytes.js/-/magic-bytes.js-1.12.1.tgz#031fedceb1fc652c1ccd917c6b45a6e8d6554245",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/magic-bytes.js/-/magic-bytes.js-1.12.1.tgz",
    "hash": "031fedceb1fc652c1ccd917c6b45a6e8d6554245",
    "integrity": "sha512-ThQLOhN86ZkJ7qemtVRGYM+gRgR8GEXNli9H/PMvpnZsE44Xfh3wx9kGJaldg314v85m+bFW6WBMaVHJc/c3zA==",
    "registry": "npm",
    "packageName": "magic-bytes.js",
    "cacheIntegrity": "sha512-ThQLOhN86ZkJ7qemtVRGYM+gRgR8GEXNli9H/PMvpnZsE44Xfh3wx9kGJaldg314v85m+bFW6WBMaVHJc/c3zA== sha1-Ax/tzrH8ZSwczZF8a0Wm6NZVQkU="
  },
  "registry": "npm",
  "hash": "031fedceb1fc652c1ccd917c6b45a6e8d6554245"
}